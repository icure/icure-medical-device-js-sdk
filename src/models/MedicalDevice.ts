/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {CodingReference} from './CodingReference';
import {Identifier} from './Identifier';
import {Property} from './Property';
import {SystemMetaDataOwner} from './SystemMetaDataOwner';
import {PersonName} from "./PersonName";
import {Address} from "./Address";
import {b64_2ab, ua2b64} from "@icure/api";
import {HealthcareProfessionalGenderEnum} from "./HealthcareProfessional";

export class MedicalDevice {
constructor(json: IMedicalDevice) {
  const { identifiers, labels, codes, picture, properties, systemMetaData, ...simpleProperties } = json

  Object.assign(this as MedicalDevice, simpleProperties as IMedicalDevice)

  this.identifiers = identifiers?.map((item) => new Identifier(item)) ?? []

  this.labels = labels ? new Set([...labels].map((it)=> new CodingReference(it))) : new Set()
  this.codes = codes ? new Set([...codes].map((it)=> new CodingReference(it))) : new Set()

  this.picture = !picture ? undefined : (picture as unknown instanceof ArrayBuffer) ? picture : (typeof (picture as unknown) === 'string') ? b64_2ab(picture as unknown as string) : undefined
  this.properties = properties ? new Set(([...properties])?.map(p => new Property(p))) : new Set()

  this.systemMetaData = systemMetaData && new SystemMetaDataOwner(systemMetaData)
}

    /**
    * The Id of the MedicalDevice. We encourage using either a v4 UUID or a HL7 Id.
    */
    'id'?: string;
    /**
    * the revision of the medical device in the database, used for conflict management / optimistic locking.
    */
    'rev'?: string;
    /**
    * the soft delete timestamp. When a medical device is ”deleted“, this is set to a non null value: the moment of the deletion
    */
    'deletionDate'?: number;
    /**
    * Typically used for business / client identifiers. An identifier should identify a device uniquely and unambiguously. However, iCure can't guarantee the uniqueness of those identifiers : This is something you need to take care of.
    */
    'identifiers': Array<Identifier>;
    /**
    * the creation date of the medical device (encoded as epoch).
    */
    'created'?: number;
    /**
    * the last modification date of the medical device (encoded as epoch).
    */
    'modified'?: number;
    /**
    * The id of the [User] that created this medical device. When creating the device, this field will be filled automatically by the current user id if not provided.
    */
    'author'?: string;
    /**
    * The id of the data owner that is responsible of this medical device. When creating the medical device, will be filled automatically by the current user data owner id ([HealthcareProfessional], [Patient] or [MedicalDevice]) if missing
    */
    'responsible'?: string;
    /**
    * A label is an item from a codification system that qualifies a medical device as being member of a certain class, whatever the value it might have taken. If the label qualifies the content of a field, it means that whatever the content of the field, the label will always apply. LOINC is a codification system typically used for labels.
    */
    'labels': Set<CodingReference>;
    /**
    * A code is an item from a codification system that qualifies the content of this medical device. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
    */
    'codes': Set<CodingReference>;
    /**
    * Soft delete (unix epoch in ms) timestamp of the medical device
    */
    'endOfLife'?: number;
    /**
    * An external (from another source) id with no guarantee or requirement for unicity.
    */
    'externalId'?: string;
    /**
    * Name of the device/application recording the data
    */
    'name'?: string;
    /**
    * Type of device/application recording the data. (eg. \"smartphone\", \"watch\",...)
    */
    'type'?: string;
    /**
    * Brand of the device recording the data
    */
    'brand'?: string;
    /**
    * Model of the device recording the data
    */
    'model'?: string;
    /**
    * Serial number of the device recording the data
    */
    'serialNumber'?: string;
    'parentId'?: string;
    /**
    * Picture of the device/application
    */
    'picture'?: ArrayBuffer;
    'properties': Set<Property>;
    'systemMetaData'?: SystemMetaDataOwner;

    marshal(): IMedicalDevice {
      return {
        ...this,
        picture: this.picture ? ua2b64(this.picture) : undefined,
        labels: [...this.labels].map((it)=> it.marshal()),
        codes: [...this.codes].map((it)=> it.marshal()),
        identifiers: this.identifiers.map((it)=> it.marshal()),
        properties: [...this.properties].map((it)=> it.marshal()),
        systemMetaData: this.systemMetaData?.marshal()
      }
    }
}

interface IMedicalDevice {
  'id'?: string;
  'rev'?: string;
  'deletionDate'?: number;
  'identifiers'?: Array<Identifier>;
  'created'?: number;
  'modified'?: number;
  'author'?: string;
  'responsible'?: string;
  'labels'?: Set<CodingReference>;
  'codes'?: Set<CodingReference>;
  'endOfLife'?: number;
  'externalId'?: string;
  'name'?: string;
  'type'?: string;
  'brand'?: string;
  'model'?: string;
  'serialNumber'?: string;
  'parentId'?: string;
  'picture'?: ArrayBuffer;
  'properties'?: Set<Property>;
  'systemMetaData'?: SystemMetaDataOwner;
}
