/**
 * ICure Medical Device Micro Service
 * ICure Medical Device Micro Service
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {DataSample} from './DataSample';
import {Measure} from './Measure';
import {TimeSeries} from './TimeSeries';
import {b2a, b64_2ab, ua2b64} from "@icure/api";

/**
* Information contained in the data sample (Measure, number, ...). Content is localized, using ISO language code as key
*/
export class Content {
constructor(json: IContent) {
  const { binaryValue, measureValue, timeSeries, compoundValue, ratio, range, ...simpleProperties } = json

  Object.assign(this as Content, simpleProperties)

  this.binaryValue = !binaryValue ? undefined : (binaryValue as unknown instanceof ArrayBuffer) ? binaryValue : (typeof (binaryValue as unknown) === 'string') ? b64_2ab(binaryValue as unknown as string) : undefined
  this.measureValue = measureValue && new Measure(measureValue)
  this.timeSeries = timeSeries && new TimeSeries(timeSeries)
  this.compoundValue = compoundValue?.map(r => new DataSample(r)) ?? []
  this.ratio = ratio?.map(r => new Measure(r)) ?? []
  this.range = range?.map(r => new Measure(r)) ?? []
}

    'stringValue'?: string;
    'numberValue'?: number;
    'booleanValue'?: boolean;
    'instantValue'?: number;
    /**
    * Value as date. The format could have a all three (day, month and year) or values on any of these three, whatever is known.
    */
    'fuzzyDateValue'?: number;
    'binaryValue'?: ArrayBuffer;
    /**
    * Linked document.
    */
    'documentId'?: string;
    'measureValue'?: Measure;
    'timeSeries'?: TimeSeries;
    'compoundValue'?: Array<DataSample>;
    'ratio'?: Array<Measure>;
    'range'?: Array<Measure>;

  marshal(): IContent {
    return {
      ...this,
      binaryValue: this.binaryValue ? ua2b64(this.binaryValue) : undefined,
      measureValue: this.measureValue?.marshal(),
      timeSeries: this.timeSeries?.marshal(),
      compoundValue: this.compoundValue?.map(r => r.marshal()),
      ratio: this.ratio?.map(r => r.marshal()),
      range: this.range?.map(r => r.marshal()),
    }
  }

}

interface IContent {
  'stringValue'?: string;
  'numberValue'?: number;
  'booleanValue'?: boolean;
  'instantValue'?: number;
  'fuzzyDateValue'?: number;
  'binaryValue'?: ArrayBuffer;
  'documentId'?: string;
  'measureValue'?: Measure;
  'timeSeries'?: TimeSeries;
  'compoundValue'?: Array<DataSample>;
  'ratio'?: Array<Measure>;
  'range'?: Array<Measure>;
}
